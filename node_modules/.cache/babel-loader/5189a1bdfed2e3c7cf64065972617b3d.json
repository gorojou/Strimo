{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/messaging\"; // import \"firebase/functions\";\n\nimport \"firebase/storage\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDVZBpImImjl5NUPjOeTxoXvybRXrUP2to\",\n  authDomain: \"strimo-9e1a1.firebaseapp.com\",\n  projectId: \"strimo-9e1a1\",\n  storageBucket: \"strimo-9e1a1.appspot.com\",\n  messagingSenderId: \"947032620004\",\n  appId: \"1:947032620004:web:3c571845061d83670da5f1\",\n  measurementId: \"G-MFM7MBW4B9\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\nexport const getToken = setTokenFound => {\n  return messaging.getToken({\n    vapidKey: \"BIgup2-RCuyJiNQAtbTeZ37xmX4HX8IPn3h7YdONdzN_qozTDv1Zwc0YNtG6po-JVQzoVRwwM13ykE6l_uU1dVw\"\n  }).then(currentToken => {\n    if (currentToken) {\n      console.log(\"current token for client: \", currentToken); // Track the token -> client mapping, by sending to backend server\n      // show on the UI that permission is secured\n    } else {\n      console.log(\"No registration token available. Request permission to generate one.\"); // shows on the UI that permission is required\n    }\n  }).catch(err => {\n    console.log(\"An error occurred while retrieving token. \", err); // catch error while creating client token\n  });\n};\nexport const onMessageListener = () => new Promise(resolve => {\n  messaging.onMessage(payload => {\n    resolve(payload);\n  });\n});\nexport const auth = firebase.auth(); // export const functions = firebase.functions();\n\nexport default firebase;","map":{"version":3,"sources":["/home/usuario/Documentos/GitHub/Strimo/src/utils/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","messaging","getToken","setTokenFound","vapidKey","then","currentToken","console","log","catch","err","onMessageListener","Promise","resolve","onMessage","payload","auth"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,OAAO,oBAAP,C,CACA;;AACA,OAAO,kBAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,8BAFS;AAGrBC,EAAAA,SAAS,EAAE,cAHU;AAIrBC,EAAAA,aAAa,EAAE,0BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB,C,CASA;;AACAR,QAAQ,CAACS,aAAT,CAAuBR,cAAvB;AACA,MAAMS,SAAS,GAAGV,QAAQ,CAACU,SAAT,EAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AACzC,SAAOF,SAAS,CACbC,QADI,CACK;AACRE,IAAAA,QAAQ,EACN;AAFM,GADL,EAKJC,IALI,CAKEC,YAAD,IAAkB;AACtB,QAAIA,YAAJ,EAAkB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,YAA1C,EADgB,CAEhB;AACA;AACD,KAJD,MAIO;AACLC,MAAAA,OAAO,CAACC,GAAR,CACE,sEADF,EADK,CAIL;AACD;AACF,GAhBI,EAiBJC,KAjBI,CAiBGC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DE,GAA1D,EADc,CAEd;AACD,GApBI,CAAP;AAqBD,CAtBM;AAuBP,OAAO,MAAMC,iBAAiB,GAAG,MAC/B,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBZ,EAAAA,SAAS,CAACa,SAAV,CAAqBC,OAAD,IAAa;AAC/BF,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GAFD;AAGD,CAJD,CADK;AAMP,OAAO,MAAMC,IAAI,GAAGzB,QAAQ,CAACyB,IAAT,EAAb,C,CACP;;AACA,eAAezB,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/messaging\";\r\n// import \"firebase/functions\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDVZBpImImjl5NUPjOeTxoXvybRXrUP2to\",\r\n  authDomain: \"strimo-9e1a1.firebaseapp.com\",\r\n  projectId: \"strimo-9e1a1\",\r\n  storageBucket: \"strimo-9e1a1.appspot.com\",\r\n  messagingSenderId: \"947032620004\",\r\n  appId: \"1:947032620004:web:3c571845061d83670da5f1\",\r\n  measurementId: \"G-MFM7MBW4B9\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst messaging = firebase.messaging();\r\n\r\nexport const getToken = (setTokenFound) => {\r\n  return messaging\r\n    .getToken({\r\n      vapidKey:\r\n        \"BIgup2-RCuyJiNQAtbTeZ37xmX4HX8IPn3h7YdONdzN_qozTDv1Zwc0YNtG6po-JVQzoVRwwM13ykE6l_uU1dVw\",\r\n    })\r\n    .then((currentToken) => {\r\n      if (currentToken) {\r\n        console.log(\"current token for client: \", currentToken);\r\n        // Track the token -> client mapping, by sending to backend server\r\n        // show on the UI that permission is secured\r\n      } else {\r\n        console.log(\r\n          \"No registration token available. Request permission to generate one.\"\r\n        );\r\n        // shows on the UI that permission is required\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"An error occurred while retrieving token. \", err);\r\n      // catch error while creating client token\r\n    });\r\n};\r\nexport const onMessageListener = () =>\r\n  new Promise((resolve) => {\r\n    messaging.onMessage((payload) => {\r\n      resolve(payload);\r\n    });\r\n  });\r\nexport const auth = firebase.auth();\r\n// export const functions = firebase.functions();\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}